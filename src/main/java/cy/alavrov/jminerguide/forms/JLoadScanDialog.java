/*
 * Copyright (c) 2015, Andrey Lavrov <lavroff@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package cy.alavrov.jminerguide.forms;

import cy.alavrov.jminerguide.data.harvestable.AllHarvestables;
import cy.alavrov.jminerguide.data.harvestable.Asteroid;
import cy.alavrov.jminerguide.data.harvestable.IHarvestable;
import cy.alavrov.jminerguide.log.JMGLogger;
import cy.alavrov.jminerguide.monitor.MiningSession;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 *
 * @author Andrey Lavrov <lavroff@gmail.com>
 */
public class JLoadScanDialog extends javax.swing.JDialog {
    private final static Comparator<Asteroid> distanceComparator = new Comparator<Asteroid>() {

        @Override
        public int compare(Asteroid o1, Asteroid o2) {
            return Integer.valueOf(o1.getDistance()).compareTo(o2.getDistance());
        }
    };
    
    private volatile static boolean sortSelected = true;

    private final MiningSession session;
    private final JAsteroidMonitorForm parent;
    
    /**
     * Creates new form JLoadScanDialog
     */
    public JLoadScanDialog(JAsteroidMonitorForm parent, MiningSession session) {
        super(parent, false);
        initComponents();
        
        this.session = session;
        this.parent = parent;
        this.jCheckBoxSort.setSelected(sortSelected);
    }

    /**
     * Parses scan result into a list of asteroids.
     * @param scan
     * @return 
     */
    private List<Asteroid> parseScan(String scan) {
        List<Asteroid> out = new ArrayList<>();
        
        String[] roids = scan.split("\n");
        for (String roid : roids) {
            String[] roidarr = roid.split("\t");
            if (roidarr.length == 3) {
                String name = roidarr[0];
                
                String unitsStr = roidarr[1].replaceAll("[^0-9]", "");
                int units = 0;
                try {
                    units = Integer.parseInt(unitsStr, 10);
                } catch (NumberFormatException e) {
                    JMGLogger.logWarning("Can't parse units from "+unitsStr);
                }
                
                String distanceStr = roidarr[2].replace(" km", "000").replaceAll("[^0-9]", "");                
                int distance = 0;
                try {
                    distance = Integer.parseInt(distanceStr, 10);
                } catch (NumberFormatException e) {
                    JMGLogger.logWarning("Can't parse distance from "+unitsStr);
                }
                
                IHarvestable hType = AllHarvestables.getByName(name);
                if (hType != null) {
                    Asteroid newRoid = new Asteroid(hType, distance, units);
                    out.add(newRoid);
                }
            }
        }
        
        if (jCheckBoxSort.isSelected()) {
            Collections.sort(out, distanceComparator);
        }
        
        return out;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaScan = new javax.swing.JTextArea();
        jButtonClearAndLoad = new javax.swing.JButton();
        jButtonLoadAndAdd = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jCheckBoxSort = new javax.swing.JCheckBox();
        jButtonResetAndLoad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Load Scan");

        jTextAreaScan.setColumns(20);
        jTextAreaScan.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextAreaScan.setRows(5);
        jScrollPane1.setViewportView(jTextAreaScan);

        jButtonClearAndLoad.setText("Clear and Load");
        jButtonClearAndLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearAndLoadActionPerformed(evt);
            }
        });

        jButtonLoadAndAdd.setText("Load and Add");
        jButtonLoadAndAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadAndAddActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jCheckBoxSort.setText("Sort");
        jCheckBoxSort.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBoxSort.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxSortItemStateChanged(evt);
            }
        });

        jButtonResetAndLoad.setText("Reset and Load");
        jButtonResetAndLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetAndLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonClearAndLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonResetAndLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadAndAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxSort)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClearAndLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadAndAdd)
                    .addComponent(jButtonResetAndLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jCheckBoxSort))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        parent.deleteLoadScanDialog();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonClearAndLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearAndLoadActionPerformed
        List<Asteroid> roids = parseScan(jTextAreaScan.getText());     
        
        session.clearAndAddRoids(roids);
        parent.updateAsteroids(session);
        
        parent.deleteLoadScanDialog();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButtonClearAndLoadActionPerformed

    private void jButtonLoadAndAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadAndAddActionPerformed
        List<Asteroid> roids = parseScan(jTextAreaScan.getText()); 
        
        session.addRoids(roids);
        parent.updateAsteroids(session);
        
        parent.deleteLoadScanDialog();
        this.setVisible(false);
        this.dispose();        
    }//GEN-LAST:event_jButtonLoadAndAddActionPerformed

    private void jCheckBoxSortItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSortItemStateChanged
        sortSelected = jCheckBoxSort.isSelected();
    }//GEN-LAST:event_jCheckBoxSortItemStateChanged

    private void jButtonResetAndLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetAndLoadActionPerformed
        List<Asteroid> roids = parseScan(jTextAreaScan.getText()); 
        
        session.resetAndAddRoids(roids);
        parent.updateAsteroids(session);
        
        parent.deleteLoadScanDialog();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButtonResetAndLoadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonClearAndLoad;
    private javax.swing.JButton jButtonLoadAndAdd;
    private javax.swing.JButton jButtonResetAndLoad;
    private javax.swing.JCheckBox jCheckBoxSort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaScan;
    // End of variables declaration//GEN-END:variables
}
