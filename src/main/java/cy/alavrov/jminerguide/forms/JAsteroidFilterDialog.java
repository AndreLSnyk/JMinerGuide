/*
 * Copyright (c) 2015, Andrey Lavrov <lavroff@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package cy.alavrov.jminerguide.forms;

import cy.alavrov.jminerguide.data.character.EVECharacter;
import cy.alavrov.jminerguide.data.harvestable.BasicHarvestable;
import java.awt.Frame;
import java.util.Set;

/**
 *
 * @author Andrey Lavrov <lavroff@gmail.com>
 */
public class JAsteroidFilterDialog extends javax.swing.JDialog {
    private final EVECharacter character;

    /**
     * Creates new form JAsteroidFilterDialog
     */
    public JAsteroidFilterDialog(Frame parent, EVECharacter character) {
        super(parent, true);
        initComponents();
        
        this.character = character;
        this.setTitle("Select Ores - " + character.getName());
        reloadFilterState();
    }
    
    private void reloadFilterState() {        
        Set<BasicHarvestable> filters = character.getAsteroidFilter();
        jCheckBoxArkonor.setSelected(filters.contains(BasicHarvestable.ARKONOR));
        jCheckBoxBistot.setSelected(filters.contains(BasicHarvestable.BISTOT));
        jCheckBoxCrokite.setSelected(filters.contains(BasicHarvestable.CROKITE));
        jCheckBoxDarkOchre.setSelected(filters.contains(BasicHarvestable.DARKOCHRE));
        jCheckBoxGneiss.setSelected(filters.contains(BasicHarvestable.GNEISS));
        jCheckBoxHedbergite.setSelected(filters.contains(BasicHarvestable.HEDBERGITE));
        jCheckBoxHemorphite.setSelected(filters.contains(BasicHarvestable.HEMORPHITE));
        jCheckBoxJaspet.setSelected(filters.contains(BasicHarvestable.JASPET));
        jCheckBoxKernite.setSelected(filters.contains(BasicHarvestable.KERNITE));
        jCheckBoxMercoxit.setSelected(filters.contains(BasicHarvestable.MERCOXIT));
        jCheckBoxOmber.setSelected(filters.contains(BasicHarvestable.OMBER));
        jCheckBoxPlagioclase.setSelected(filters.contains(BasicHarvestable.PLAGIOCLASE));
        jCheckBoxPyroxeres.setSelected(filters.contains(BasicHarvestable.PYROXERES));
        jCheckBoxScordite.setSelected(filters.contains(BasicHarvestable.SCORDITE));
        jCheckBoxSpodumain.setSelected(filters.contains(BasicHarvestable.SPODUMAIN));
        jCheckBoxVeldspar.setSelected(filters.contains(BasicHarvestable.VELDSPAR));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxVeldspar = new javax.swing.JCheckBox();
        jCheckBoxScordite = new javax.swing.JCheckBox();
        jCheckBoxPyroxeres = new javax.swing.JCheckBox();
        jCheckBoxPlagioclase = new javax.swing.JCheckBox();
        jCheckBoxOmber = new javax.swing.JCheckBox();
        jCheckBoxKernite = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxJaspet = new javax.swing.JCheckBox();
        jCheckBoxHemorphite = new javax.swing.JCheckBox();
        jCheckBoxHedbergite = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxGneiss = new javax.swing.JCheckBox();
        jCheckBoxDarkOchre = new javax.swing.JCheckBox();
        jCheckBoxCrokite = new javax.swing.JCheckBox();
        jCheckBoxSpodumain = new javax.swing.JCheckBox();
        jCheckBoxBistot = new javax.swing.JCheckBox();
        jCheckBoxArkonor = new javax.swing.JCheckBox();
        jCheckBoxMercoxit = new javax.swing.JCheckBox();
        jButtonClose = new javax.swing.JButton();
        jButtonAll = new javax.swing.JButton();
        jButtonNone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Ores");
        setModal(true);

        jLabel1.setText("HiSec Ores");

        jPanel1.setToolTipText("");
        jPanel1.setLayout(new java.awt.GridLayout(2, 3));

        jCheckBoxVeldspar.setText("Veldspar");
        jCheckBoxVeldspar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVeldsparItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxVeldspar);

        jCheckBoxScordite.setText("Scordite");
        jCheckBoxScordite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxScorditeItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxScordite);

        jCheckBoxPyroxeres.setText("Pyroxeres");
        jCheckBoxPyroxeres.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPyroxeresItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxPyroxeres);

        jCheckBoxPlagioclase.setText("Plagioclase");
        jCheckBoxPlagioclase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlagioclaseItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxPlagioclase);

        jCheckBoxOmber.setText("Omber");
        jCheckBoxOmber.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOmberItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxOmber);

        jCheckBoxKernite.setText("Kernite");
        jCheckBoxKernite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxKerniteItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxKernite);

        jLabel2.setText("LowSec Ores");

        jPanel2.setLayout(new java.awt.GridLayout(1, 3));

        jCheckBoxJaspet.setText("Jaspet");
        jCheckBoxJaspet.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxJaspetItemStateChanged(evt);
            }
        });
        jPanel2.add(jCheckBoxJaspet);

        jCheckBoxHemorphite.setText("Hemorphite");
        jCheckBoxHemorphite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxHemorphiteItemStateChanged(evt);
            }
        });
        jPanel2.add(jCheckBoxHemorphite);

        jCheckBoxHedbergite.setText("Hedbergite");
        jCheckBoxHedbergite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxHedbergiteItemStateChanged(evt);
            }
        });
        jPanel2.add(jCheckBoxHedbergite);

        jLabel3.setText("NullSec Ores");

        jPanel3.setLayout(new java.awt.GridLayout(3, 3));

        jCheckBoxGneiss.setText("Gneiss");
        jCheckBoxGneiss.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxGneissItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxGneiss);

        jCheckBoxDarkOchre.setText("Dark Ochre");
        jCheckBoxDarkOchre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxDarkOchreItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxDarkOchre);

        jCheckBoxCrokite.setText("Crokite");
        jCheckBoxCrokite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxCrokiteItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxCrokite);

        jCheckBoxSpodumain.setText("Spodumain");
        jCheckBoxSpodumain.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxSpodumainItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxSpodumain);

        jCheckBoxBistot.setText("Bistot");
        jCheckBoxBistot.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxBistotItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxBistot);

        jCheckBoxArkonor.setText("Arkonor");
        jCheckBoxArkonor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxArkonorItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxArkonor);

        jCheckBoxMercoxit.setText("Mercoxit");
        jCheckBoxMercoxit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMercoxitItemStateChanged(evt);
            }
        });
        jPanel3.add(jCheckBoxMercoxit);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonAll.setText("All");
        jButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAllActionPerformed(evt);
            }
        });

        jButtonNone.setText("None");
        jButtonNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonClose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAll)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonClose)
                    .addComponent(jButtonAll)
                    .addComponent(jButtonNone))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNoneActionPerformed
        character.clearAsteroidFilter();
        reloadFilterState();
    }//GEN-LAST:event_jButtonNoneActionPerformed

    private void jButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAllActionPerformed
        character.allOnAsteroidFilter();
        reloadFilterState();
    }//GEN-LAST:event_jButtonAllActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jCheckBoxVeldsparItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVeldsparItemStateChanged
        if (jCheckBoxVeldspar.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.VELDSPAR);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.VELDSPAR);
        }
    }//GEN-LAST:event_jCheckBoxVeldsparItemStateChanged

    private void jCheckBoxScorditeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxScorditeItemStateChanged
        if (jCheckBoxScordite.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.SCORDITE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.SCORDITE);
        }
    }//GEN-LAST:event_jCheckBoxScorditeItemStateChanged

    private void jCheckBoxPyroxeresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPyroxeresItemStateChanged
        if (jCheckBoxPyroxeres.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.PYROXERES);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.PYROXERES);
        }
    }//GEN-LAST:event_jCheckBoxPyroxeresItemStateChanged

    private void jCheckBoxPlagioclaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlagioclaseItemStateChanged
        if (jCheckBoxPlagioclase.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.PLAGIOCLASE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.PLAGIOCLASE);
        }
    }//GEN-LAST:event_jCheckBoxPlagioclaseItemStateChanged

    private void jCheckBoxOmberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOmberItemStateChanged
        if (jCheckBoxOmber.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.OMBER);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.OMBER);
        }
    }//GEN-LAST:event_jCheckBoxOmberItemStateChanged

    private void jCheckBoxKerniteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxKerniteItemStateChanged
        if (jCheckBoxKernite.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.KERNITE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.KERNITE);
        }
    }//GEN-LAST:event_jCheckBoxKerniteItemStateChanged

    private void jCheckBoxJaspetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxJaspetItemStateChanged
        if (jCheckBoxJaspet.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.JASPET);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.JASPET);
        }
    }//GEN-LAST:event_jCheckBoxJaspetItemStateChanged

    private void jCheckBoxHemorphiteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxHemorphiteItemStateChanged
        if (jCheckBoxHemorphite.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.HEMORPHITE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.HEMORPHITE);
        }
    }//GEN-LAST:event_jCheckBoxHemorphiteItemStateChanged

    private void jCheckBoxHedbergiteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxHedbergiteItemStateChanged
        if (jCheckBoxHedbergite.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.HEDBERGITE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.HEDBERGITE);
        }
    }//GEN-LAST:event_jCheckBoxHedbergiteItemStateChanged

    private void jCheckBoxGneissItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxGneissItemStateChanged
        if (jCheckBoxGneiss.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.GNEISS);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.GNEISS);
        }
    }//GEN-LAST:event_jCheckBoxGneissItemStateChanged

    private void jCheckBoxDarkOchreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxDarkOchreItemStateChanged
        if (jCheckBoxDarkOchre.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.DARKOCHRE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.DARKOCHRE);
        }
    }//GEN-LAST:event_jCheckBoxDarkOchreItemStateChanged

    private void jCheckBoxCrokiteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxCrokiteItemStateChanged
        if (jCheckBoxCrokite.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.CROKITE);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.CROKITE);
        }
    }//GEN-LAST:event_jCheckBoxCrokiteItemStateChanged

    private void jCheckBoxSpodumainItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSpodumainItemStateChanged
        if (jCheckBoxSpodumain.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.SPODUMAIN);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.SPODUMAIN);
        }
    }//GEN-LAST:event_jCheckBoxSpodumainItemStateChanged

    private void jCheckBoxBistotItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxBistotItemStateChanged
        if (jCheckBoxBistot.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.BISTOT);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.BISTOT);
        }
    }//GEN-LAST:event_jCheckBoxBistotItemStateChanged

    private void jCheckBoxArkonorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxArkonorItemStateChanged
        if (jCheckBoxArkonor.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.ARKONOR);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.ARKONOR);
        }
    }//GEN-LAST:event_jCheckBoxArkonorItemStateChanged

    private void jCheckBoxMercoxitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMercoxitItemStateChanged
        if (jCheckBoxMercoxit.isSelected()) {
            character.addHarvestableToFilter(BasicHarvestable.MERCOXIT);
        } else {
            character.removeHarvestableFromFilter(BasicHarvestable.MERCOXIT);
        }
    }//GEN-LAST:event_jCheckBoxMercoxitItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAll;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonNone;
    private javax.swing.JCheckBox jCheckBoxArkonor;
    private javax.swing.JCheckBox jCheckBoxBistot;
    private javax.swing.JCheckBox jCheckBoxCrokite;
    private javax.swing.JCheckBox jCheckBoxDarkOchre;
    private javax.swing.JCheckBox jCheckBoxGneiss;
    private javax.swing.JCheckBox jCheckBoxHedbergite;
    private javax.swing.JCheckBox jCheckBoxHemorphite;
    private javax.swing.JCheckBox jCheckBoxJaspet;
    private javax.swing.JCheckBox jCheckBoxKernite;
    private javax.swing.JCheckBox jCheckBoxMercoxit;
    private javax.swing.JCheckBox jCheckBoxOmber;
    private javax.swing.JCheckBox jCheckBoxPlagioclase;
    private javax.swing.JCheckBox jCheckBoxPyroxeres;
    private javax.swing.JCheckBox jCheckBoxScordite;
    private javax.swing.JCheckBox jCheckBoxSpodumain;
    private javax.swing.JCheckBox jCheckBoxVeldspar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
